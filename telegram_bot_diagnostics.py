"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å RAG
"""
import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.app.config import settings
from src.rag.retriever import retrieve_context, construct_prompt
from src.rag.genai import llm_answer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–æ—Ç–∞ —Å RAG"""
    print("ü§ñ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê –° RAG")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üìã –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö:")
    print(f"   BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.BOT_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   GEMINI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.GEMINI_API_KEY else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   RAG_RELEVANCE_THRESHOLD: {settings.RAG_RELEVANCE_THRESHOLD}")
    
    if not settings.BOT_TOKEN or not settings.GEMINI_API_KEY:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:")
    try:
        from src.bot.handlers import router, rag_answer_handler
        print("   ‚úÖ Bot handlers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from src.bot.runner import main as bot_main
        print("   ‚úÖ Bot runner –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        message_handlers = len(router.message.handlers)
        print(f"   üìä Message handlers: {message_handlers}")
        
        if message_handlers < 4:
            print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Ü–µ–ø–æ—á–∫—É
    print("\nüß† –¢–ï–°–¢ RAG –¶–ï–ü–û–ß–ö–ò:")
    test_queries = [
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è",
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", 
        "–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
    ]
    
    rag_working = True
    for query in test_queries:
        try:
            contexts = retrieve_context(query)
            if contexts:
                prompt = construct_prompt(query, contexts)
                answer = llm_answer(prompt)
                print(f"   ‚úÖ '{query}': {len(contexts)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –æ—Ç–≤–µ—Ç {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è '{query}': –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"   ‚ùå '{query}': –æ—à–∏–±–∫–∞ - {e}")
            rag_working = False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
    print("\nüéØ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ë–û–¢–ê:")
    
    class MockUser:
        id = 999999
        first_name = 'TestUser'
        full_name = 'Test User'
    
    class MockMessage:
        def __init__(self, text):
            self.text = text
            self.from_user = MockUser()
            self._responses = []
        
        async def answer(self, text, **kwargs):
            self._responses.append(text)
            print(f"      üì§ BOT: {text[:100]}{'...' if len(text) > 100 else ''}")
            return self  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–±—è –∫–∞–∫ mock –¥–ª—è delete()
        
        async def delete(self):
            print(f"      üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    
    try:
        test_message = MockMessage("—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ")
        print(f"   üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{test_message.text}'")
        
        await rag_answer_handler(test_message)
        
        if len(test_message._responses) >= 2:  # "–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..." + —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            bot_handler_working = True
        else:
            print("   ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç—ã")
            bot_handler_working = False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
        bot_handler_working = False
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
    print("\nüì° –ü–†–û–í–ï–†–ö–ê TELEGRAM API:")
    try:
        from aiogram import Bot
        bot = Bot(token=settings.BOT_TOKEN)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –≤—ã–∑–æ–≤ API
        bot_info = await bot.get_me()
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
        print(f"   ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        print(f"   üÜî Username: @{bot_info.username}")
        
        await bot.session.close()
        telegram_working = True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
        telegram_working = False
    
    # 6. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    components = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", settings.BOT_TOKEN and settings.GEMINI_API_KEY),
        ("RAG —Å–∏—Å—Ç–µ–º–∞", rag_working),
        ("Bot –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", bot_handler_working),
        ("Telegram API", telegram_working)
    ]
    
    all_working = True
    for name, status in components:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {name}")
        if not status:
            all_working = False
    
    if all_working:
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢! –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú –í TELEGRAM:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ")
        print("   4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –º–µ–¥–∏–∞)")
        print("   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö webhook'–æ–≤")
    else:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤—ã—à–µ.")
    
    return all_working

async def test_webhook_conflict():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã webhook'–æ–≤"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê WEBHOOK –ö–û–ù–§–õ–ò–ö–¢–û–í:")
    
    try:
        from aiogram import Bot
        bot = Bot(token=settings.BOT_TOKEN)
        
        webhook_info = await bot.get_webhook_info()
        
        if webhook_info.url:
            print(f"   ‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {webhook_info.url}")
            print("   üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ polling –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å webhook:")
            print("      await bot.delete_webhook()")
        else:
            print("   ‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - polling –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
            
        await bot.session.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_bot_integration()
    await test_webhook_conflict()
    
    if success:
        print("\nüöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py")
        print("   –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
    else:
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())