#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run.py ingest    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    python run.py api       # –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä
    python run.py bot       # –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞
    python run.py test      # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    python run.py full      # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è + API + –±–æ—Ç
"""

import sys
import asyncio
import subprocess
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    logger.info(f"–ó–∞–ø—É—Å–∫: {description}")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        logger.info(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            logger.info(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {description}")
        logger.error(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        if e.stdout:
            logger.error(f"stdout: {e.stdout}")
        if e.stderr:
            logger.error(f"stderr: {e.stderr}")
        return False

async def run_ingest():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.rag.ingest import ingest_data
        await ingest_data()
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        return False

def run_api():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä."""
    command = ["python", "-m", "uvicorn", "src.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    return run_command(command, "API —Å–µ—Ä–≤–µ—Ä")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    command = ["python", "-m", "src.bot.runner"]
    return run_command(command, "Telegram –±–æ—Ç")

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã."""
    command = ["python", "-m", "pytest", "src/tests/", "-v"]
    return run_command(command, "–¢–µ—Å—Ç—ã")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path(".env")
    if not env_file.exists():
        logger.warning("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º poetry
    try:
        subprocess.run(["poetry", "--version"], check=True, capture_output=True)
        logger.info("‚úÖ Poetry –Ω–∞–π–¥–µ–Ω")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.error("‚ùå Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Poetry –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        subprocess.run(["poetry", "check"], check=True, capture_output=True)
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except subprocess.CalledProcessError:
        logger.warning("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏. –ó–∞–ø—É—Å–∫ poetry install...")
        if not run_command(["poetry", "install"], "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
            return False
    
    logger.info("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
    return True

async def run_full():
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è, –∑–∞—Ç–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ API –∏ –±–æ—Ç–∞."""
    logger.info("üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    if not await run_ingest():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é")
        return False
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ API –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
    
    # –ó–∞–ø—É—Å–∫ API –≤ —Ñ–æ–Ω–µ
    api_process = subprocess.Popen(
        ["python", "-m", "uvicorn", "src.app.main:app", "--host", "0.0.0.0", "--port", "8000"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # –î–∞–µ–º API –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_process = subprocess.Popen(
        ["python", "-m", "src.bot.runner"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    logger.info("‚úÖ API –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã")
    logger.info(f"API PID: {api_process.pid}")
    logger.info(f"Bot PID: {bot_process.pid}")
    logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        while api_process.poll() is None and bot_process.poll() is None:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        api_process.terminate()
        bot_process.terminate()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        api_process.wait(timeout=10)
        bot_process.wait(timeout=10)
        
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) < 2:
        print(__doc__)
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∫—Ä–æ–º–µ help
    if command != "help":
        if not check_environment():
            logger.error("‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ")
            sys.exit(1)
    
    if command == "ingest":
        asyncio.run(run_ingest())
    elif command == "api":
        run_api()
    elif command == "bot":
        run_bot()
    elif command == "test":
        run_tests()
    elif command == "full":
        asyncio.run(run_full())
    elif command == "help":
        print(__doc__)
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print(__doc__)
        sys.exit(1)

if __name__ == "__main__":
    main()