"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import sys
import logging
from typing import List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
from src.rag.retriever import retrieve_context
from src.rag.genai import embed_texts, llm_answer
from src.app.config import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º collection –æ—Ç–¥–µ–ª—å–Ω–æ
import chromadb
try:
    client = chromadb.PersistentClient(path=str(settings.INDEX_DIR))
    collection = client.get_collection(name="admissions_docs")
except:
    collection = None

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_collection_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChromaDB"""
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ò ===")
    
    if not collection:
        print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False
    
    try:
        count = collection.count()
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {count}")
        
        if count == 0:
            print("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        sample = collection.get(limit=3, include=['documents', 'metadatas'])
        print("\nüìÑ –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for i, (doc, meta) in enumerate(zip(sample['documents'], sample['metadatas'])):
            source = meta.get('source', 'unknown')
            print(f"{i+1}. –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            print(f"   –î–ª–∏–Ω–∞: {len(doc)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü—Ä–µ–≤—å—é: {doc[:100]}...")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return False

def test_embedding_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò ===")
    
    test_texts = [
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è",
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", 
        "–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
    ]
    
    try:
        embeddings = embed_texts(test_texts)
        
        if not embeddings:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
        print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {len(embeddings)}")
        
        for i, emb in enumerate(embeddings):
            if emb:
                print(f"   –í–µ–∫—Ç–æ—Ä {i+1}: —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {len(emb)}")
            else:
                print(f"   –í–µ–∫—Ç–æ—Ä {i+1}: ‚ùå –ø—É—Å—Ç–æ–π")
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_search_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞"""
    print("\n=== –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ü–û–ò–°–ö–ê ===")
    
    test_queries = [
        ("—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"),
        ("–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", "–ø—Ä–æ–≥—Ä–∞–º–º—ã"),
        ("–∫–æ–Ω—Ç–∞–∫—Ç—ã", "—Ç–µ–ª–µ—Ñ–æ–Ω"),
        ("–ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã", "–±–∞–ª–ª"),
        ("–æ–±—â–µ–∂–∏—Ç–∏–µ", "–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ")
    ]
    
    results = []
    
    for query, expected_keyword in test_queries:
        try:
            contexts = retrieve_context(query)
            
            if not contexts:
                print(f"‚ùå '{query}': –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results.append(False)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            max_score = max(ctx.score for ctx in contexts)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            has_keyword = any(expected_keyword.lower() in ctx.text.lower() for ctx in contexts)
            
            if max_score >= settings.RAG_RELEVANCE_THRESHOLD and has_keyword:
                print(f"‚úÖ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(contexts)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {max_score:.3f}")
                results.append(True)
            else:
                print(f"‚ö†Ô∏è '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(contexts)}, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {max_score:.3f}, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {has_keyword})")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå '{query}': –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ - {e}")
            results.append(False)
    
    success_rate = sum(results) / len(results) * 100
    print(f"\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞: {success_rate:.1f}% ({sum(results)}/{len(results)})")
    
    return success_rate >= 80

def test_end_to_end():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É RAG"""
    print("\n=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ ===")
    
    query = "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ?"
    
    try:
        # 1. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        contexts = retrieve_context(query)
        
        if not contexts:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {len(contexts)}")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        from src.rag.retriever import construct_prompt
        prompt = construct_prompt(query, contexts)
        answer = llm_answer(prompt)
        
        if not answer or len(answer) < 50:
            print("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False
            
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   –ü—Ä–µ–≤—å—é: {answer[:200]}...")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        relevant_keywords = ["160,000", "—Ä—É–±", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
        has_relevant_info = any(keyword.lower() in answer.lower() for keyword in relevant_keywords)
        
        if has_relevant_info:
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            return True
        else:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   RAG_RELEVANCE_THRESHOLD: {settings.RAG_RELEVANCE_THRESHOLD}")
    print(f"   RAG_TOP_K: {settings.RAG_TOP_K}")
    print(f"   INDEX_DIR: {settings.INDEX_DIR}")
    print(f"   DATA_DIR: {settings.DATA_DIR}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ö–æ–ª–ª–µ–∫—Ü–∏—è", test_collection_status),
        ("–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", test_embedding_quality),
        ("–ü–æ–∏—Å–∫", test_search_quality),
        ("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç", test_end_to_end)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üéØ –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! RAG —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.")
    elif passed >= total * 0.75:
        print(f"\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò ({passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ)")
    else:
        print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï–ò–°–ü–†–ê–í–ù–ê ({passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ)")

if __name__ == "__main__":
    asyncio.run(main())