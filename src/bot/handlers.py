import json
import logging
from typing import Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app import models
from app.db import AsyncSessionLocal
from src.rag.genai import llm_answer
from src.rag.retriever import construct_prompt, retrieve_context

from .keyboards import back_to_menu_keyboard, main_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)

async def safe_answer(callback: CallbackQuery, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ callback."""
    if callback.message:
        await safe_answer(callback, text, **kwargs)


@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = message.from_user.first_name if message.from_user and message.from_user.first_name else "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç"
    welcome_text = f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!

–Ø ‚Äî –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ALT University. 

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!
"""
    await message.answer(
        welcome_text,
        reply_markup=main_menu_keyboard()
    )


@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
- "–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?"
- "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ?"
- "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?"
"""
    await message.answer(help_text, reply_markup=main_menu_keyboard())


@router.message(Command("menu"))
async def menu_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard()
    )


@router.callback_query(F.data == "show_programs")
async def show_programs_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥—Ä–∞–º–º—ã'."""
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(models.Program).order_by(models.Program.name))
            programs = result.scalars().all()
            if not programs:
                await safe_answer(callback, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            else:
                response_text = "üéì **–ù–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n\n"
                for p in programs:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è SQLAlchemy –æ–±—ä–µ–∫—Ç–æ–≤
                    cost_value = getattr(p, 'cost', None)
                    cost = f"{cost_value:,} —Ä—É–±.".replace(",", " ") if cost_value else "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
                    response_text += f"‚Ä¢ **{p.name}** - {cost}\n"
                    
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è description
                    desc_value = getattr(p, 'description', None)
                    if desc_value:
                        response_text += f"  _{desc_value}_\n\n"
                    else:
                        response_text += "\n"
                await safe_answer(callback, response_text, parse_mode="Markdown", reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
        await safe_answer(callback, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data == "show_guide")
async def show_guide_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–®–∞–≥–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'."""
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(models.Step).order_by(models.Step.step_number))
            steps = result.scalars().all()
            if not steps:
                await safe_answer(callback, 
                    "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
                    reply_markup=back_to_menu_keyboard()
                )
            else:
                response_text = "üìù **–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n\n"
                for s in steps:
                    response_text += f"**{s.step_number}.** {s.description}\n\n"
                
                response_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å —à–∞–≥–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.*"
                
                await safe_answer(callback, response_text, reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤: {e}")
        await safe_answer(callback, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data == "show_faq")
async def show_faq_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'FAQ'."""
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(models.FAQ).order_by(models.FAQ.id))
            faqs = result.scalars().all()
            if not faqs:
                await safe_answer(callback, 
                    "–†–∞–∑–¥–µ–ª FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.",
                    reply_markup=back_to_menu_keyboard()
                )
            else:
                response_text = "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n\n"
                for i, f in enumerate(faqs, 1):
                    response_text += f"**{i}. {f.question}**\n{f.answer}\n\n"
                
                response_text += "üí¨ *–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é!*"
                
                await safe_answer(callback, response_text, reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {e}")
        await safe_answer(callback, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data == "check_docs")
async def check_docs_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'."""
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            result = await session.execute(select(models.Document).filter(models.Document.required == True))
            required_docs = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            result = await session.execute(select(models.Document).filter(models.Document.required == False))
            optional_docs = result.scalars().all()
            
            if not required_docs:
                await safe_answer(callback, 
                    "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.",
                    reply_markup=back_to_menu_keyboard()
                )
            else:
                response_text = "üìã **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:**\n\n"
                
                response_text += "‚úÖ **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n"
                for i, d in enumerate(required_docs, 1):
                    response_text += f"{i}. {d.name}\n"
                
                if optional_docs:
                    response_text += "\nüìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n"
                    for i, d in enumerate(optional_docs, 1):
                        response_text += f"{i}. {d.name}\n"
                
                response_text += "\nüí° *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –≥–æ—Ç–æ–≤—ã —Å–∫–∞–Ω—ã –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.*"
                response_text += "\n\nüìß *–î–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ª–∏—á–Ω–æ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é.*"
                
                await safe_answer(callback, response_text, reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await safe_answer(callback, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard()
        )
    await callback.answer()


@router.message(F.text)
async def rag_answer_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RAG-–ø–∞–π–ø–ª–∞–π–Ω –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ."""
    if not message.text or not message.from_user:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_message = await message.answer("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... üß†")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        contexts = retrieve_context(message.text)

        # 2. –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = construct_prompt(message.text, contexts)

        # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        answer = llm_answer(prompt)
        
        # 4. –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            async with AsyncSessionLocal() as session:
                # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                result = await session.execute(
                    select(models.Candidate).filter(models.Candidate.telegram_id == message.from_user.id)
                )
                candidate = result.scalars().first()
                if not candidate:
                    candidate = models.Candidate(
                        telegram_id=message.from_user.id,
                        full_name=message.from_user.full_name
                    )
                    session.add(candidate)
                    await session.flush()  # –§–ª–∞—à–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                interaction = models.Interaction(
                    candidate_id=candidate.id,
                    user_message=message.text,
                    bot_response=answer,
                    contexts_json=json.dumps([{"source": c.source, "text": c.text, "score": c.score} for c in contexts], ensure_ascii=False)
                )
                session.add(interaction)
                await session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ë–î: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î

        # 5. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await search_message.delete()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
        if len(answer) > 4096:
            answer = answer[:4093] + "..."
            
        await message.answer(answer, disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RAG-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await search_message.delete()
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "show_contacts")
async def show_contacts_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'."""
    contact_text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

üè¢ **–ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è ALT University**

üìß **Email:** admissions@alt.university
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (495) 123-45-67
üåê **–°–∞–π—Ç:** https://alt.university

üìç **–ê–¥—Ä–µ—Å:** 
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, –¥. 1

üïê **–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:**
–ü–Ω-–ü—Ç: 09:00 - 18:00
–°–±: 10:00 - 15:00
–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

üìã **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞:**
https://cabinet.alt.university
"""
    await safe_answer(callback, contact_text, reply_markup=back_to_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "ask_question")
async def ask_question_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'."""
    question_text = """
üîç **–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å**

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π!

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?
‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?
‚Ä¢ –ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ?
‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏—é?

üí° –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!
"""
    await safe_answer(callback, question_text, reply_markup=back_to_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await safe_answer(callback, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()
